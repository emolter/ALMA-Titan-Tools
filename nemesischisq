#! /usr/bin/env python
# Get reduced chi square value for NEMESIS model based on mre file
# Can be restricted to supplied range (in GHz)
# Nvar is taken from the mre header - not sure if it's actually always correct, e.g. for continuous retrievals

import numpy as np
import sys
from scipy import stats
from pymodules.spectools import ghz2wavnum

if not(len(sys.argv) > 1): sys.exit("Usage: nemesischisq <mre file> [optional: -f<flow/GHz>,<fup/GHz> -n<nvar>]" )

f=open(sys.argv[1],'r')
data=f.readlines()
ndata=int(data[1].split()[2])
nvar=int(data[1].split()[3])

# Parse optional command line variables
for arg in sys.argv:
    if arg[0:2] == '-f':
        fRange = True
        arg = arg[2:].split(',')
        flo = ghz2wavnum(float(arg[0]))
        fup = ghz2wavnum(float(arg[1]))
    else:
        flo = 0.0
        fup = np.inf
        
    if arg[0:2] == '-n':
        nvar = int(arg[2:])

freq = np.zeros(ndata)
obs = np.zeros(ndata)
err = np.zeros(ndata)
mod = np.zeros(ndata)

for i in range(ndata):
   line = data[5+i]
   freq[i]=(float(line.split()[1]))
   obs[i]=(float(line.split()[2]))
   err[i]=(float(line.split()[3]))
   mod[i]=(float(line.split()[5]))

obsm=np.ma.array(obs,mask=((freq<flo) | (freq>fup)))
errm=np.ma.array(err,mask=((freq<flo) | (freq>fup)))
modm=np.ma.array(mod,mask=((freq<flo) | (freq>fup)))

chisq = np.sum((obsm-modm)**2/errm**2)
DOF = np.ma.MaskedArray.count(obsm)-nvar

print "Nvar = ",nvar
print "Chisq_R =",chisq / DOF
print "P = ",stats.chi2.sf(chisq,DOF)
